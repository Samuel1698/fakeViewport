let lastScriptUptime=null;function cmpVersions(t,e){const a=t.split(".").map(Number),n=e.split(".").map(Number);for(let t=0,e=Math.max(a.length,n.length);t<e;t++){const e=a[t]||0,o=n[t]||0;if(e>o)return 1;if(e<o)return-1}return 0}function formatDuration(t){const e=Math.floor(t/86400),a=Math.floor(t%86400/3600),n=Math.floor(t%3600/60),o=Math.floor(t%60),i=[];return e>0&&i.push(`${e}d`),a>0&&i.push(`${a}h`),n>0&&i.push(`${n}m`),o>0&&i.push(`${o}s`),i.length>0?i.join(" "):"0s"}document.addEventListener("DOMContentLoaded",(()=>{loadInfo(),checkForUpdate(),setInterval(loadInfo,6e4),setInterval(checkForUpdate,36e5)}));const formatter=new Intl.DateTimeFormat("en-US",{month:"short",day:"2-digit",year:"numeric",hour:"2-digit",minute:"2-digit",hour12:!1});async function fetchJSON(t){try{const e=await fetch(t);return e.ok?await e.json():null}catch{return null}}async function checkForUpdate(){const t=await fetchJSON("/update");if(!t?.data)return;const{current:e,latest:a}=t.data;if(cmpVersions(a,e)<=0)return;const n=document.getElementById("updateBanner");n&&(n.querySelector("span").textContent=`New version ${a} available (running ${e})`,n.querySelector("#releaseLink").href="https://github.com/Samuel1698/fakeViewport/releases/latest",n.hidden=!1)}async function loadInfo(){const t=await fetchJSON("/api/script_uptime"),e=document.getElementById("scriptUptime");if(t?.data&&"number"==typeof t.data.script_uptime){const a=t.data.script_uptime;e.textContent=null!==lastScriptUptime&&a===lastScriptUptime?"Not Running":formatDuration(a),lastScriptUptime=a}else e.textContent="Not Running",lastScriptUptime=null;const a=await fetchJSON("/api/system_uptime");a?.data&&(document.getElementById("systemUptime").textContent=formatDuration(a.data.system_uptime));const n=await fetchJSON("/api/ram");if(n?.data){const t=(n.data.ram_used/1024**3).toFixed(1),e=(n.data.ram_total/1024**3).toFixed(1);document.getElementById("ram").textContent=`${t} GiB / ${e} GiB`}const o=await fetchJSON("/api/health_interval");if(o?.data){const t=Math.round(o.data.health_interval_sec/60);document.getElementById("healthInterval").textContent=`${t} min`}const i=await fetchJSON("/api/log_interval");i?.data&&(document.getElementById("logInterval").textContent=`${i.data.log_interval_min} min`);const s=await fetchJSON("/api/status");s?.data&&(document.getElementById("statusMsg").textContent=s.data.status);const d=await fetchJSON("/api/log_entry");d?.data&&(document.getElementById("logEntry").textContent=d.data.log_entry);const r=await fetchJSON("/api/next_restart"),l=document.getElementById("scheduledRestart");if(r?.data?.next_restart){const t=new Date(r.data.next_restart);l.textContent=formatter.format(t).replace(/, /g," "),l.parentElement.removeAttribute("hidden")}else l.parentElement.setAttribute("hidden","")}async function control(t,e){e.setAttribute("disabled",""),setTimeout((()=>{e.removeAttribute("disabled")}),15e3);const a=document.querySelector("#statusMessage span");a.textContent="",a.style.color="";try{const e=await fetch(`/api/control/${t}`,{method:"POST"}),n=await e.json();"ok"===n.status?(a.textContent="✓ "+n.message,a.style.color="green"):(a.textContent="✗ "+n.message,a.style.color="red"),await loadInfo(),setTimeout((()=>{a.textContent="",a.style.color=""}),15e3),setTimeout(loadInfo,15e3)}catch(t){a.textContent="✗ "+t,a.style.color="red"}}async function applyUpdate(t){t.disabled=!0,t.textContent="Updating…";try{const e=await fetch("/update/apply",{method:"POST"}),a=await e.json();if(t.textContent=a?.data?.outcome?.startsWith("updated")?"Updated - restarting…":"Update failed",a?.data?.outcome?.startsWith("updated")){const t=await fetch("/api/control/restart",{method:"POST"});"ok"===(await t.json()).status&&setTimeout((()=>location.reload()),5e3)}}catch{t.textContent="Update failed"}}const logsBtn=document.getElementById("showLogsBtn"),update=document.getElementById("applyUpdateBtn"),modal=document.getElementById("logsModal"),closeX=document.getElementById("closeLogs"),output=document.getElementById("logOutput");logsBtn.addEventListener("click",(async()=>{const t=await fetchJSON("/api/logs?limit=100");t?.data?.logs?(output.textContent=t.data.logs.join(""),modal.removeAttribute("hidden")):modal.setAttribute("hidden","")})),update.addEventListener("click",(t=>applyUpdate(t.target))),closeX.addEventListener("click",(()=>modal.setAttribute("hidden",""))),modal.addEventListener("click",(t=>{t.target===modal&&modal.setAttribute("hidden","")}));