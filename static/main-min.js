let updateCache={timestamp:0,data:null},lastScriptUptime=null;const CACHE_TTL=9e5;function cmpVersions(t,e){const a=t.split(".").map(Number),n=e.split(".").map(Number);for(let t=0,e=Math.max(a.length,n.length);t<e;t++){const e=a[t]||0,s=n[t]||0;if(e>s)return 1;if(e<s)return-1}return 0}async function loadUpdateData(){const t=Date.now();if(updateCache.data&&t-updateCache.timestamp<CACHE_TTL)return updateCache.data;const[e,a]=await Promise.all([fetchJSON("/update"),fetch("/update/changelog").then((t=>t.json()))]);if(!e?.data)throw new Error("Failed to fetch version info");if("ok"!==a.status)throw new Error("Failed to fetch changelog");const{current:n,latest:s}=e.data,{changelog:o,release_url:d}=a.data;return updateCache={timestamp:t,data:{current:n,latest:s,changelog:o,releaseUrl:d}},updateCache.data}async function checkForUpdate(){try{const{current:t,latest:e}=await loadUpdateData();if(cmpVersions(e,t)<=0)return;const a=document.getElementById("update");a&&a.removeAttribute("hidden")}catch(t){console.error("Update check failed:",t)}}function showChangelog(){const t=updateCache.data;if(!t)return void console.error("No update data; did you call checkForUpdate()?");const{latest:e,changelog:a,releaseUrl:n}=t,s=document.querySelector("#changelog .container h2");e.includes("failed-to-fetch")?s.textContent="Failed to Fetch Changelog":s.textContent=`Release v${e}`,document.getElementById("changelog-body").innerHTML=marked.parse(a),document.getElementById("changelog-link").href=n,document.getElementById("changelog").removeAttribute("hidden")}function formatDuration(t){const e=Math.floor(t/86400),a=Math.floor(t%86400/3600),n=Math.floor(t%3600/60),s=Math.floor(t%60),o=[];return e>0&&o.push(`${e}d`),a>0&&o.push(`${a}h`),n>0&&o.push(`${n}m`),s>0&&o.push(`${s}s`),o.length>0?o.join(" "):"0s"}document.addEventListener("DOMContentLoaded",(()=>{loadInfo(),checkForUpdate(),setInterval(loadInfo,6e4),setInterval(checkForUpdate,CACHE_TTL)})),document.addEventListener("DOMContentLoaded",(()=>{const t={status:document.getElementById("info"),logs:document.getElementById("logs"),updateBanner:document.getElementById("changelog")},e={status:document.getElementById("status"),logs:document.getElementById("logsBtn"),updateBanner:document.getElementById("update"),refreshButton:document.getElementById("refreshButton")},a=document.getElementById("logOutput");function n(a){Object.values(t).forEach((t=>{t.setAttribute("hidden","")})),t[a].removeAttribute("hidden"),Object.entries(e).forEach((([t,e])=>{e.setAttribute("aria-selected",t===a?"true":"false")})),"status"!=a&&e.refreshButton.setAttribute("hidden","true"),s()}function s(){const t=e.updateBanner,a=e.logs;t.hasAttribute("hidden")?(a.classList.add("last"),t.classList.remove("last")):(a.classList.remove("last"),t.classList.add("last"))}t.status.removeAttribute("hidden"),t.logs.setAttribute("hidden",""),t.updateBanner.setAttribute("hidden",""),e.status.setAttribute("aria-selected","true"),e.logs.removeAttribute("aria-selected","false"),e.updateBanner.removeAttribute("aria-selected","false"),s(),e.status.addEventListener("click",(()=>{n("status"),e.refreshButton.removeAttribute("hidden","")})),e.logs.addEventListener("click",(async()=>{n("logs");const t=await fetchJSON("/api/logs?limit=100");t?.data?.logs&&(a.textContent=t.data.logs.join(""))})),e.updateBanner.addEventListener("click",(()=>{n("updateBanner"),showChangelog()})),e.refreshButton.addEventListener("click",(()=>{n("status"),loadInfo()}))}));const formatter=new Intl.DateTimeFormat("en-US",{month:"short",day:"2-digit",year:"numeric",hour:"2-digit",minute:"2-digit",hour12:!1});async function fetchJSON(t){try{const e=await fetch(t);return e.ok?await e.json():null}catch{return null}}async function loadInfo(){const t=await fetchJSON("/api/script_uptime"),e=document.getElementById("scriptUptime");if(t?.data&&"number"==typeof t.data.script_uptime){const a=t.data.script_uptime;e.classList.remove("Green","Red"),null!==lastScriptUptime&&a===lastScriptUptime?(e.textContent="Not Running",e.classList.add("Red")):(e.textContent=formatDuration(a),e.classList.add("Green")),lastScriptUptime=a}else e.textContent="Not Running",e.classList.add("Red"),lastScriptUptime=null;const a=await fetchJSON("/api/system_uptime");a?.data&&(document.getElementById("systemUptime").textContent=formatDuration(a.data.system_uptime));const n=await fetchJSON("/api/ram");if(n?.data){const t=(n.data.ram_used/1024**3).toFixed(1),e=(n.data.ram_total/1024**3).toFixed(1),a=document.getElementById("ram"),s=n.data.ram_used/n.data.ram_total*100;a.textContent=`${t} GiB / ${e} GiB`,a.classList.remove("Green","Yellow","Red"),s<=35?a.classList.add("Green"):s<=60?a.classList.add("Yellow"):a.classList.add("Red")}const s=await fetchJSON("/api/health_interval");if(s?.data){const t=Math.round(s.data.health_interval_sec/60);document.getElementById("healthInterval").textContent=`${t} min`}const o=await fetchJSON("/api/log_interval");o?.data&&(document.getElementById("logInterval").textContent=`${o.data.log_interval_min} min`);const d=await fetchJSON("/api/status");d?.data&&(document.getElementById("statusMsg").textContent=d.data.status);const r=await fetchJSON("/api/log_entry");if(r?.data){const t=document.getElementById("logEntry");t.textContent=r.data.log_entry,t.classList.remove("Green","Blue","Red"),t.textContent.includes("[INFO]")?t.classList.add("Green"):t.textContent.includes("[ERROR]")?t.classList.add("Red"):t.textContent.includes("[DEBUG]")&&t.classList.add("Blue")}const i=await fetchJSON("/api/next_restart"),c=document.getElementById("scheduledRestart");if(i?.data?.next_restart){const t=new Date(i.data.next_restart);c.textContent=formatter.format(t).replace(/, /g," "),c.parentElement.removeAttribute("hidden")}else c.parentElement.setAttribute("hidden","")}async function control(t,e){e.setAttribute("disabled",""),setTimeout((()=>{e.removeAttribute("disabled")}),5e3);const a=document.querySelector("#statusMessage span");a.textContent="",a.classList.remove("Green","Red");try{const e=await fetch(`/api/control/${t}`,{method:"POST"}),n=await e.json();"ok"===n.status?(a.textContent="✓ "+n.message,a.classList.add("Green")):(a.textContent="✗ "+n.message,a.classList.add("Red")),await loadInfo(),setTimeout((()=>{a.textContent="",a.classList.remove("Green","Red")}),5e3),setTimeout(loadInfo,5e3)}catch(t){a.textContent="✗ "+t,a.classList.add("Red")}}async function applyUpdate(t){t.disabled=!0,t.textContent="Updating…";try{const e=await fetch("/update/apply",{method:"POST"}),a=await e.json();if(t.textContent=a?.data?.outcome?.startsWith("updated")?"Updated - restarting…":"Update failed",a?.data?.outcome?.startsWith("updated")){const t=await fetch("/api/control/restart",{method:"POST"});"ok"===(await t.json()).status&&setTimeout((()=>location.reload()),5e3)}}catch{t.textContent="Update failed"}}